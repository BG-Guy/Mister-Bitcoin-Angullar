{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./utils-service.service\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(http, utilsService) {\n      var _a;\n\n      this.http = http;\n      this.utilsService = utilsService;\n      this.KEY = 'contactsDB';\n      this._contactsDb = ((_a = this.utilsService.load(this.KEY)) === null || _a === void 0 ? void 0 : _a._value) || [{\n        _id: \"5a56640269f443a5d64b32ca\",\n        name: \"Ochoa Hyde\",\n        email: \"ochoahyde@renovize.com\",\n        phone: \"+1 (968) 593-3824\"\n      }, {\n        _id: \"5a5664025f6ae9aa24a99fde\",\n        name: \"Hallie Mclean\",\n        email: \"halliemclean@renovize.com\",\n        phone: \"+1 (948) 464-2888\"\n      }, {\n        _id: \"5a56640252d6acddd183d319\",\n        name: \"Parsons Norris\",\n        email: \"parsonsnorris@renovize.com\",\n        phone: \"+1 (958) 502-3495\"\n      }, {\n        _id: \"5a566402ed1cf349f0b47b4d\",\n        name: \"Rachel Lowe\",\n        email: \"rachellowe@renovize.com\",\n        phone: \"+1 (911) 475-2312\"\n      }, {\n        _id: \"5a566402abce24c6bfe4699d\",\n        name: \"Dominique Soto\",\n        email: \"dominiquesoto@renovize.com\",\n        phone: \"+1 (807) 551-3258\"\n      }, {\n        _id: \"5a566402a6499c1d4da9220a\",\n        name: \"Shana Pope\",\n        email: \"shanapope@renovize.com\",\n        phone: \"+1 (970) 527-3082\"\n      }, {\n        _id: \"5a566402f90ae30e97f990db\",\n        name: \"Faulkner Flores\",\n        email: \"faulknerflores@renovize.com\",\n        phone: \"+1 (952) 501-2678\"\n      }, {\n        _id: \"5a5664027bae84ef280ffbdf\",\n        name: \"Holder Bean\",\n        email: \"holderbean@renovize.com\",\n        phone: \"+1 (989) 503-2663\"\n      }, {\n        _id: \"5a566402e3b846c5f6aec652\",\n        name: \"Rosanne Shelton\",\n        email: \"rosanneshelton@renovize.com\",\n        phone: \"+1 (968) 454-3851\"\n      }, {\n        _id: \"5a56640272c7dcdf59c3d411\",\n        name: \"Pamela Nolan\",\n        email: \"pamelanolan@renovize.com\",\n        phone: \"+1 (986) 545-2166\"\n      }, {\n        _id: \"5a5664029a8dd82a6178b15f\",\n        name: \"Roy Cantu\",\n        email: \"roycantu@renovize.com\",\n        phone: \"+1 (929) 571-2295\"\n      }, {\n        _id: \"5a5664028c096d08eeb13a8a\",\n        name: \"Ollie Christian\",\n        email: \"olliechristian@renovize.com\",\n        phone: \"+1 (977) 419-3550\"\n      }, {\n        _id: \"5a5664026c53582bb9ebe9d1\",\n        name: \"Nguyen Walls\",\n        email: \"nguyenwalls@renovize.com\",\n        phone: \"+1 (963) 471-3181\"\n      }, {\n        _id: \"5a56640298ab77236845b82b\",\n        name: \"Glenna Santana\",\n        email: \"glennasantana@renovize.com\",\n        phone: \"+1 (860) 467-2376\"\n      }, {\n        _id: \"5a56640208fba3e8ecb97305\",\n        name: \"Malone Clark\",\n        email: \"maloneclark@renovize.com\",\n        phone: \"+1 (818) 565-2557\"\n      }, {\n        _id: \"5a566402abb3146207bc4ec5\",\n        name: \"Floyd Rutledge\",\n        email: \"floydrutledge@renovize.com\",\n        phone: \"+1 (807) 597-3629\"\n      }, {\n        _id: \"5a56640298500fead8cb1ee5\",\n        name: \"Grace James\",\n        email: \"gracejames@renovize.com\",\n        phone: \"+1 (959) 525-2529\"\n      }, {\n        _id: \"5a56640243427b8f8445231e\",\n        name: \"Tanner Gates\",\n        email: \"tannergates@renovize.com\",\n        phone: \"+1 (978) 591-2291\"\n      }, {\n        _id: \"5a5664025c3abdad6f5e098c\",\n        name: \"Lilly Conner\",\n        email: \"lillyconner@renovize.com\",\n        phone: \"+1 (842) 587-3812\"\n      }];\n      this._contacts$ = new BehaviorSubject([]);\n      this.contacts$ = this._contacts$.asObservable();\n      this._filterBy$ = new BehaviorSubject({\n        term: ''\n      });\n      this.filterBy$ = this._filterBy$.asObservable();\n    }\n\n    query() {\n      const filterBy = this._filterBy$.getValue();\n\n      let contacts = this._contactsDb;\n      contacts = contacts.filter(({\n        name\n      }) => {\n        return name.toLowerCase().includes(filterBy.term.toLowerCase());\n      });\n\n      this._contacts$.next(contacts);\n    }\n\n    shouldTransferBitcoin() {\n      return this.http.get('https://yesno.wtf/api').pipe(map(res => res.image));\n    }\n\n    getEmptyContact() {\n      return {\n        name: '',\n        email: '',\n        phone: ''\n      };\n    }\n\n    remove(contactId) {\n      const contacts = this._contactsDb;\n      const contactIdx = contacts.findIndex(contact => contact._id === contactId);\n      contacts.splice(contactIdx, 1);\n\n      this._contacts$.next(contacts);\n\n      this.utilsService.store(this.KEY, contacts);\n      return of({});\n    }\n\n    getById(contactId) {\n      const contact = this._contactsDb.find(contact => contact._id === contactId);\n\n      return of(Object.assign({}, contact));\n    }\n\n    setFilterBy(filterBy) {\n      this._filterBy$.next(Object.assign({}, filterBy));\n\n      this.query();\n    }\n\n    save(contact) {\n      return contact._id ? this._edit(contact) : this._add(contact);\n    }\n\n    _add(contact) {\n      contact._id = this._makeId();\n      contact.image = `https://robohash.org/${contact.name}?set=set5`;\n      const contacts = this._contactsDb;\n\n      this._contactsDb.push(contact);\n\n      this._contacts$.next([...contacts]);\n\n      this.utilsService.store(this.KEY, contacts);\n      return of(contact);\n    }\n\n    _edit(contact) {\n      const contacts = this._contactsDb;\n      const contactIdx = contacts.findIndex(_contact => _contact._id === contact._id);\n      contacts.splice(contactIdx, 1, contact);\n\n      this._contacts$.next([...contacts]);\n\n      this.utilsService.store(this.KEY, this._contacts$);\n      return of(contact);\n    }\n\n    _makeId(length = 5) {\n      var text = \"\";\n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    }\n\n  }\n\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UtilsService));\n  };\n\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module"}