{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Transaction } from '../models/transaction.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./utils-service.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(utilsService) {\n      this.utilsService = utilsService;\n      this.KEY = 'user';\n      this._usersDB = this.utilsService.load(this.KEY) || this.getUsers(); // private _transaction = new BehaviorSubject<Transaction>()\n\n      this._user$ = new BehaviorSubject(this.getEmptyUser('Guest'));\n      this.user$ = this._user$.asObservable();\n    }\n\n    getUser() {\n      return this.user$;\n    }\n\n    getUsers() {\n      return [this.getEmptyUser('Guy'), this.getEmptyUser('Guy100'), this.getEmptyUser('Guest'), this.getEmptyUser('Yoav')];\n    }\n\n    getGuestUser() {\n      return {\n        name: 'Guest',\n        balance: 0,\n        transactions: [new Transaction()]\n      };\n    }\n\n    getEmptyUser(str) {\n      return {\n        name: str || '',\n        balance: 100,\n        transactions: [new Transaction()]\n      };\n    }\n\n    logout() {\n      let user = this.getGuestUser();\n\n      this._user$.next(user);\n    }\n\n    login(name) {\n      let loggedUser = this._usersDB.find(user => user.name === name);\n\n      if (loggedUser) {\n        this._user = loggedUser;\n\n        this._user$.next(loggedUser);\n\n        return;\n      }\n\n      let newUser = this.getEmptyUser(name);\n\n      this._usersDB.push(newUser);\n\n      this.utilsService.store(this.KEY, this._usersDB);\n      this._user = newUser;\n      return; // let savedUser = this._user\n      // savedUser.name = user.name\n      // this._user$.next(savedUser);\n      // this._usersDB.push(savedUser)\n      // this.utilsService.store('user', this._usersDB)\n    }\n\n    isAuthenticated() {\n      const user = this._user$.value; // return (user) ? true : false;\n\n      return !!user;\n    }\n\n    addTransaction(contact, amount) {\n      let newTransaction = new Transaction();\n      const editedUser = Object.assign({}, this._user$.value);\n      newTransaction._id = this.utilsService.setId();\n      newTransaction.to = contact.name;\n      newTransaction.from = editedUser.name;\n      newTransaction.timestamp = Date.now();\n      newTransaction.amount = amount;\n      editedUser.balance -= amount;\n      editedUser.transactions.unshift(newTransaction);\n\n      const userIdx = this._usersDB.findIndex(user => user.name === editedUser.name);\n\n      this._usersDB.splice(userIdx, 1, editedUser);\n\n      this._user$.next(editedUser);\n\n      this.utilsService.store(this.KEY, this._usersDB);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.UtilsService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}